import Head from "next/head";
import Navbar from "@/components/Navbar";
// import styles from "@/styles/pages/pleaseConfirmEmail.module.scss";
import styles from "@/styles/pages/profile.module.scss"

import axios, { AxiosError } from "axios";
import { API_URL } from "@/lib/utils/urls";

import {
    InferGetServerSidePropsType,
    GetServerSideProps,
    GetServerSidePropsContext,
} from "next";
import { ParsedUrlQuery } from "querystring";

// import IUser from '@/lib/types/IUser';
import IUserBack from '@/lib/types/IUserBack';
import ProfileContent from "@/components/ProfileContent";
// import omit from '@/lib/utils/omit';
// import FinishedInterviews from '@/components/myInterviews/FinishedInterviews/FinishedInterviews'

type Props = {
    userData?: IUserBack |null;
    errorMsg: string;
};
interface IParams extends ParsedUrlQuery {
    username: string;
}

export default function Profile(
    props: InferGetServerSidePropsType<typeof getServerSideProps>
) {
    // const router = useRouter();
    // const [msg, setMsg] = useState<string>("");
    // console.log('router here', router);
    // console.log('context here', props.first);

    console.log(props.userData);
    console.log(props.errorMsg);

    return (
        <>
            <Head>
                <title>Pass</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
                <Navbar />
            <div className={styles.bgWrapper}>
                <main className={`container ${styles.block}`}>
                    <ProfileContent {...props}/>
                    {/* <FinishedInterviews 
                        role={props.userData?.role!}
                        username={props.userData?.username} /> */}
            </main>
            </div>
        </>
    );
}



export const getServerSideProps: GetServerSideProps<Props> = async (ctx) => {
    const { username } = ctx.params as IParams;
    let userData:IUserBack|null=null;
    let errorMsg:string|null=null;

    try {
        const response = await axios.get(
            `${API_URL}/users/${username}`
        );
        console.log('user from back',JSON.stringify(response?.data));
        // userData = omit(['password'],response?.data);
        // userData= userData as IUserBack;
        userData=response?.data;
        console.log("userData", userData);
    } catch (err) {
        const e=err as AxiosError;
        console.log(e);
        //@ts-ignore
        errorMsg=e.response?.data?.message;
    }
    return {
        props: {
            userData: userData||null,
            errorMsg: errorMsg||'Server is down'
        },
    };
};
